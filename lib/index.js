// Generated by CoffeeScript 1.6.3
var AmqpEventEmitter, AmqpQueue, EventEmitter, amqp, uuid,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

amqp = require('amqp');

uuid = require('uuid');

EventEmitter = require('events').EventEmitter;

AmqpQueue = (function(_super) {
  __extends(AmqpQueue, _super);

  function AmqpQueue(options) {
    this.subscribe = __bind(this.subscribe, this);
    this.createQueue = __bind(this.createQueue, this);
    this.createExchange = __bind(this.createExchange, this);
    this.error = __bind(this.error, this);
    this.options = JSON.parse(JSON.stringify(options));
  }

  AmqpQueue.prototype.error = function(err) {
    return this.emit('error', err);
  };

  AmqpQueue.prototype.createConnection = function() {
    var options,
      _this = this;
    options = this.options.connection || {};
    this.connection = amqp.createConnection(options);
    this.connection.once('error', this.error);
    return this.connection.once('ready', function() {
      return _this.emit('connection.ready');
    });
  };

  AmqpQueue.prototype.createExchange = function() {
    var options, _base,
      _this = this;
    options = (_base = this.options).exchange != null ? (_base = this.options).exchange : _base.exchange = {};
    if (options.name == null) {
      options.name = 'amqp-eventemitter';
    }
    if (options.type == null) {
      options.type = 'fanout';
    }
    if (options.autoDelete == null) {
      options.autoDelete = true;
    }
    this.exchange = this.connection.exchange(options.name, options);
    this.exchange.on('error', this.error);
    return setImmediate(function() {
      return _this.emit('exchange.ready');
    });
  };

  AmqpQueue.prototype.createQueue = function() {
    var options, _base,
      _this = this;
    options = (_base = this.options).queue != null ? (_base = this.options).queue : _base.queue = {};
    if (options.name == null) {
      options.name = "" + this.options.exchange.name + "." + (uuid.v4());
    }
    return this.connection.queue(options.name, options, function(queue) {
      _this.queue = queue;
      _this.queue.on('error', _this.error);
      _this.queue.once('queueBindOk', function() {
        return _this.emit('queue.ready');
      });
      return _this.queue.bind(_this.exchange, '#{@options.exchange.name}.event');
    });
  };

  AmqpQueue.prototype.subscribe = function() {
    var promise,
      _this = this;
    promise = this.queue.subscribe(function(message, headers, deliveryInfo) {
      return _this.emit('message', message);
    });
    promise.addErrback(this.error);
    return promise.addCallback(function() {
      _this.emit('amqp-eventemitter.ready');
      return _this.ready = true;
    });
  };

  AmqpQueue.prototype.connect = function() {
    this.once('connection.ready', this.createExchange);
    this.once('exchange.ready', this.createQueue);
    this.once('queue.ready', this.subscribe);
    return this.createConnection();
  };

  return AmqpQueue;

})(EventEmitter);

AmqpEventEmitter = (function(_super) {
  __extends(AmqpEventEmitter, _super);

  function AmqpEventEmitter(options) {
    var _this = this;
    AmqpEventEmitter.__super__.constructor.apply(this, arguments);
    if (options.url != null) {
      options = {
        connection: options
      };
    }
    this.queue = new AmqpQueue(options);
    if (options.autoConnect !== false) {
      this.queue.connect();
    }
    this.queue.on('message', function(_arg) {
      var args, type;
      type = _arg.type, args = _arg.args;
      return EventEmitter.prototype.emit.apply(_this, [type].concat(__slice.call(args)));
    });
  }

  AmqpEventEmitter.prototype.emit = function() {
    var args, type, wait,
      _this = this;
    type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (wait = function() {
      if (_this.queue.ready) {
        return _this.queue.exchange.publish('message', {
          type: type,
          args: args
        });
      } else {
        return setImmediate(wait);
      }
    })();
  };

  return AmqpEventEmitter;

})(EventEmitter);

module.exports = {
  AmqpEventEmitter: AmqpEventEmitter,
  AmqpQueue: AmqpQueue
};
