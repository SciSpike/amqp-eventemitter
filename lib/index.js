// Generated by CoffeeScript 1.6.3
var AmqpEventEmitter, EventEmitter, amqp, uuid,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

amqp = require('amqp');

uuid = require('uuid');

EventEmitter = require('events').EventEmitter;

AmqpEventEmitter = (function(_super) {
  __extends(AmqpEventEmitter, _super);

  function AmqpEventEmitter(opts) {
    var _base,
      _this = this;
    this.opts = opts;
    this.error = __bind(this.error, this);
    AmqpEventEmitter.__super__.constructor.apply(this, arguments);
    this._emit = function() {
      return EventEmitter.prototype.emit.apply(_this, arguments);
    };
    this.ready = false;
    if ((_base = this.opts).exchange == null) {
      _base.exchange = 'amqp-eventemitter';
    }
    this.connection = amqp.createConnection(this.opts);
    this.connection.on('error', this.error);
    this.connection.once('ready', function() {
      _this.exchange = _this.connection.exchange(_this.opts.exchange, {
        type: 'fanout',
        autoDelete: true
      });
      _this.exchange.on('error', _this.error);
      return _this.connection.queue("" + opts.exchange + "." + (uuid.v4()), function(queue) {
        queue.on('error', _this.error);
        queue.on('queueBindOk', function() {
          var promise;
          promise = queue.subscribe(function(_arg, headers, deliveryInfo) {
            var args, type;
            type = _arg.type, args = _arg.args;
            return _this._emit.apply(_this, [type].concat(__slice.call(args)));
          });
          promise.addErrback(_this.error);
          return promise.addCallback(function() {
            _this._emit("" + _this.opts.exchange + ".ready");
            return _this.ready = true;
          });
        });
        return queue.bind(_this.exchange, 'message');
      });
    });
  }

  AmqpEventEmitter.prototype.error = function(err) {
    return this._emit('error', err);
  };

  AmqpEventEmitter.prototype.emit = function() {
    var args, type, wait,
      _this = this;
    type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (wait = function() {
      if (_this.ready) {
        return _this.exchange.publish('message', {
          type: type,
          args: args
        });
      } else {
        return setImmediate(wait);
      }
    })();
  };

  return AmqpEventEmitter;

})(EventEmitter);

module.exports = {
  AmqpEventEmitter: AmqpEventEmitter
};
